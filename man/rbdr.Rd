% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rbdr.R
\name{rbdr}
\alias{rbdr}
\alias{bdrcoverageprob}
\alias{bdrcovar}
\title{Simulation of Boolean Model of Deterministic Rectangles}
\usage{
rbdr(lambda, grain, win, seed = NULL)

bdrcoverageprob(lambda, grain)

bdrcovar(lambda, grain, xy)
}
\arguments{
\item{lambda}{Intensity of the germ process (which is a Poisson point process)}

\item{grain}{Recantangle object specifying the grain}

\item{win}{The window to simulate in (an owin object)}

\item{seed}{Optional input (default in NULL). Is an integer passed to \code{\link{base}{set.seed}}. Used to reproduce patterns exactly.}

\item{xy}{A raster object that specifies the pixel coordinates of the desired covariance image. In the same vein and as.mask in spatstat.}
}
\value{
Depends on the function used (see Functions section).
}
\description{
Functions for simulating a Boolean model with grains that are deterministic rectangles.
A Boolean model is a two stage model, first the locations (called germs) of grains are randomly distributed according to a Poisson point process, then a random grain is placed on each germ independently.
A thorough introduction can be found in [3].
Also described in this help file are functions for calculating the true coverage probability and covariance.
}
\section{Functions}{
\itemize{
\item \code{rbdr}: Returns an \code{owin} that is a set generated by simulating a deterministic rectangle Boolean
 model with a specified intensity and rectangular grain.
 The window information is not contained in this object.
 If the simulated set is empty then an empty \code{owin} object is returned.
The point process of germs is generated using spatstat's \code{\link[spatstat]{rpoispp}}.

\item \code{bdrcoverageprob}: Returns the true coverage probability given the intensity and grain.

\item \code{bdrcovar}: Returns an image of the covariance as calculated from disc radius and intensity.
}}

\section{WARNING}{

The returned object of \code{rbdr} is only the contents of Xi and thus could be much smaller than the window (e.g. when the simulated set is empty).
}

\examples{
grain <- owin(xrange = c(-5, 5), yrange = c(-5, 5))
win <- owin(xrange = c(0, 100), c(0, 100))
lambda <- 4.2064E-3
xi <- rbdr(lambda, grain, win)
plot(xi, col = "black")
plot(win, add = TRUE)

#calculate theoretical values of the model
truecoverageprob <- bdrcoverageprob(lambda, grain)
xy <- as.mask(dilationAny(win, win), eps = c(1, 1))
truecovariance <- bdrcovar(lambda, grain, xy)
plot(truecovariance)

######################
#test
grain <- owin(xrange = c(-5, 5), yrange = c(-5, 5))
win <- owin(xrange = c(0, 200), c(0, 200))
lambda <- 4.2064E-3
xi <- rbdr(lambda, grain, win)
plot(xi, col = "black")
plot(win, add = TRUE)

#calculate theoretical values of the model
truep <- bdrcoverageprob(lambda, grain)
xy <- as.mask(dilationAny(win, win), eps = c(0.1, 0.1))
 #eps of 1 (a 10 grain width) is too large! eps of 0.1
truecvc <- bdrcovar(lambda, grain, xy)

#estimate values should be close for a large window
phat <- coverageprob(xi, win)
truep - phat
cvchat <- balancedracscovariances(as.mask(xi, eps = c(0.1, 0.1)), obswin = win, methods = list("pickaadd"))[[1]]
plot.solist(solist(
  True = truecvc,
  PickaEstimate = cvchat), equal.ribbon = TRUE, main = "Covariance: True and Estimate")
plot(eval.im(truecvc - cvchat), main = "Difference Between Estimate and True")
truecvc.iso <- rotmean(truecvc[disc(radius = 50), drop = FALSE], padzero = FALSE)
cvchat.iso <- rotmean(cvchat[disc(radius = 50)], padzero = FALSE)
plot(truecvc.iso)
plot(cvchat.iso, col = "red", add = TRUE)
plot(truecvc.iso, xlim = c(0, 20))
plot(cvchat.iso, col = "red", add = TRUE)
}
\references{
[3] Chiu, S.N., Stoyan, D., Kendall, W.S. and Mecke, J. (2013) Stochastic Geometry and Its Applications, 3rd ed. Chichester, United Kingdom: John Wiley & Sons.
}
\keyword{datagen}
\keyword{spatial}
