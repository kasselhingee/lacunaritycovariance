
R version 3.2.2 (2015-08-14) -- "Fire Safety"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #test contagion for pixels
> 
> library(stationaryracsinference, quietly = TRUE)

spatstat 1.44-1.027       (nickname: 'Levity Waves') 
For an introduction to spatstat, type 'beginner'
> 
> #should have 0 nbrs of Xi and Xi, and 4 nbrs of xi and not xi
> #should have 4 nbrs of not xi and xi, and lots of not xi and not xi
> testmat <- matrix(FALSE,nrow=5,ncol=5)
> testmat[2,2] <- TRUE
> xi <- owin(mask = testmat)
> w <- Frame(xi)
> adjmat <- adjacency(xi, Frame(xi))
> adjmat
       Xi Not Xi
Xi      0      4
Not Xi  4     72
> 
> #should have 2 nbrs of Xi and Xi, and 6 nbrs of xi and not xi
> #should have 6 nbrs of not xi and xi, and lots of not xi and not xi
> testmat <- matrix(FALSE,nrow=5,ncol=5)
> testmat[2,2] <- TRUE
> testmat[3,2] <- TRUE
> xi <- owin(mask = testmat)
> w <- Frame(xi)
> adjmat <- adjacency(xi, Frame(xi))
> adjmat
       Xi Not Xi
Xi      2      6
Not Xi  6     66
> 
> #should have 2 nbrs of Xic and Xic, and 6 nbrs of xic and xi
> #should have 6 nbrs of xi and xic, and lots of xi and xi
> testmat <- matrix(TRUE,nrow=5,ncol=5)
> testmat[2,2] <- FALSE
> testmat[2,3] <- FALSE
> xi <- owin(mask = testmat)
> w <- Frame(xi)
> adjmat <- adjacency(xi, Frame(xi))
> adjmat
       Xi Not Xi
Xi     66      6
Not Xi  6      2
> 
> 
> #minimum contagion by making every pixel have half nbrs in Xi and half outside xi
> vectmp <- vector(mode="logical",length=100)
> vectmp[(1:length(vectmp) %%2)==0] <- TRUE
> vectmp[(1:length(vectmp) %%2)!=0] <- FALSE
> testmat <- matrix(vectmp,nrow=10,ncol=10)
> xi <- owin(mask = testmat)
> contagpixelgrid(xi,Frame(xi)) #result shoud be zero
[1] 0
> 
> #maximum contagion
> vectmp <- vector(mode="logical",length=100)
> vectmp[3:length(vectmp)] <- TRUE
> vectmp[1:2] <- FALSE #two points to avoid zero adjacency
> testmat <- matrix(vectmp,nrow=10,ncol=10)
> xi <- owin(mask = testmat)
> contagpixelgrid(xi,Frame(xi)) #result should be close to 1
[1] 0.8851047
> 
> proc.time()
   user  system elapsed 
  1.136   0.012   1.149 
